# LMS-specific media storage
#PROFILE_IMAGE_BACKEND = {
#    "class": f"{__name__}.MinIOStorage",
#    "options": PROFILE_IMAGE_BACKEND["options"],
#}

#from storages.backends.s3boto3 import S3Boto3Storage
#class MediaStorage(S3Boto3Storage):
#    bucket_name = "{{ MINIO_BUCKET_NAME }}",
#    location = PROFILE_IMAGE_BACKEND["options"]["location"]

#PROFILE_IMAGE_BACKEND = f"{__name__}.MediaStorage"

from storages.backends.s3boto3 import S3Boto3Storage
class MinIOStorage(S3Boto3Storage):  # pylint: disable=abstract-method
    def __init__(self):
        bucket = "{{ MINIO_BUCKET_NAME }}"
        super().__init__(bucket=bucket, custom_domain=None, querystring_auth=True)


#PROFILE_IMAGE_BACKEND = {
#    "class": f"{__name__}.MinIOStorage",
#    "options": {},
#    }
    
#PROFILE_IMAGE_BACKEND["class"] = f"{__name__}.MinIOStorage"
"PROFILE_IMAGE_BACKEND": {
    "class": "storages.backends.s3boto.S3BotoStorage",
    "options": {
      "headers": {
        "Cache-Control": "max-age-{{ PROFILE_IMAGE_MAX_AGE }}"
      },
      "location": "{{ MINIO_FILE_UPLOAD_BUCKET_NAME }}/profile-images"
    }
}
